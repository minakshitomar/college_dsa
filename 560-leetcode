//560-leetcode
//approach-1
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int count=0;
        for(int i=0;i<n;i++)
        {
            int sum =0;
            sum=nums[i];
            if(sum==k)
            {
                count++;
            }
            //for(int j=i;j<n;j++)
            for(int j=i+1;j<n;j++)
            {
                sum=sum+nums[j];
                if(sum==k)
                {
                    count++;
                }
            }
        }
        return count;
    }
};

//approach-2
class Solution {
public:
    int subarraySum(vector<int>& nums, int k) 
    {
        unordered_map<int,int>prefixSum;
        prefixSum[0]=1;
        int sum=0,count=0;
        for(int num: nums)
        {
            sum += num;
            if(prefixSum.find(sum-k) != prefixSum.end())
            {
                count += prefixSum[sum-k];
            }
            prefixSum[sum]++;
        }
        return count;
        
    }
};
